# Scalar for DateTime
"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

# Query type definition
"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    # Add wallet-related queries
    transactions(user_id: Int!): [Transaction!]! 
    generatePdf(user_id: Int!): GeneratePdfResponse!
    # generateQrCode(user_id: Int!, recipient_id: Int!, amount: Float!): GenerateQrCodeResponse! 
}

# Mutation type definition
type Mutation {
    # Add wallet-related mutations
    addFunds(user_id: Int!, amount: Float!, payment_method: String!): WalletResponse! 
    transfer(sender_id: Int!, recipient_id: Int!, amount: Float!): WalletResponse! 
    withdraw(user_id: Int!, amount: Float!, bank_account: String!): WalletResponse! 
    generateUserTransactionsPdf(user_id: Int!): TransactionPDFResponse!
}

# User type definition
"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!

    # Add wallet field to the User type
    wallet: Wallet @hasOne
}

# Wallet type definition
type Wallet {
    id: ID!
    user_id: Int!
    balance: Float!
    created_at: DateTime!
    updated_at: DateTime!
}

# Transaction type definition
type Transaction {
    id: ID!
    user_id: Int!
    type: String!
    amount: Float!
    date: DateTime!
    status: String!
}

# WalletResponse type definition
type WalletResponse {
    success: Boolean!
    message: String!
    new_balance: Float!
}

# GeneratePdfResponse type definition
type GeneratePdfResponse {
    pdf_url: String!
}

# GeneratePdfResponse fo type definition
type TransactionPDFResponse {
    success: Boolean!
    message: String!
    pdf_url: String!
}

# GenerateQrCodeResponse type definition
type GenerateQrCodeResponse {
    qr_code_url: String!
}
